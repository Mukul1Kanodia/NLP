# -*- coding: utf-8 -*-
"""Sentimental_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hoxB05gZ1y_9lFzJ5-1rTPbfYYw6ARxL
"""

import pandas as pd
import numpy as np

data=pd.read_csv("/content/IMDB Dataset.csv", on_bad_lines='skip')

data.head()

data.tail()

data.columns

data.shape

data.describe()

data.isnull().any()

data['sentiment'].value_counts()

"""**Importing Libraries to do sentimental Analysis**"""

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelBinarizer
import nltk
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize, sent_tokenize
from wordcloud import WordCloud, STOPWORDS

# NLP and preprocessing
import spacy
import re, string, unicodedata
from nltk.tokenize.toktok import ToktokTokenizer
from nltk.stem import LancasterStemmer, WordNetLemmatizer

# Machine Learning models
from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.naive_bayes import MultinomialNB
from sklearn.svm import SVC

# TextBlob for sentiment analysis
from textblob import TextBlob, Word

# Evaluation metrics
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# HTML parsing
from bs4 import BeautifulSoup

nltk.download('stopwords')

#Tokenization of text
tokenizer=ToktokTokenizer()
#Setting Stopwords
stopwords=nltk.corpus.stopwords.words('english')

#Noise Removal Function
def noiseremoval_text(text):
  soup=BeautifulSoup(text,'html.parser')
  text=soup.get_text()
  text=re.sub('\[[^]]*\]','',text)
  return text

data['review']=data['review'].apply(noiseremoval_text)

data.head()

"""**STEMMING**"""

#stemming the text
def stemmer(text):
  ps=nltk.porter.PorterStemmer()
  text=' '.join([ps.stem(word) for word in text.split()])
  return text

data['review']=data['review'].apply(stemmer)

data.head()

# Removing the stopwords
from nltk.tokenize.toktok import ToktokTokenizer
from nltk.corpus import stopwords

def removing_stopwords(text, is_lower_case=False):
    # Tokenization of text
    tokenizer = ToktokTokenizer()
    tokens = tokenizer.tokenize(text)

    # Remove extra whitespace from tokens
    tokens = [i.strip() for i in tokens]

    # Setting English stopwords
    stop_wr = set(stopwords.words('english'))

    # Filter tokens based on case preference
    if is_lower_case:
        filtokens = [i for i in tokens if i not in stop_wr]
    else:
        filtokens = [i for i in tokens if i.lower() not in stop_wr]

    # Join tokens back to a string
    filtered_texts = ' '.join(filtokens)

    return filtered_texts

data['review']=data['review'].apply(removing_stopwords)

data.head()

#split the dataset
#train dataset
train_reviews_data=data.review[:30000]
#test dataset

test_reviews_data=data.review[30000:]

#Count vectorizer for bag of words
cv=CountVectorizer(min_df=1,max_df=1,binary=False,ngram_range=(1,3))
#transformed train reviews
cv_train=cv.fit_transform(train_reviews_data)
#transformed test reviews
cv_test=cv.transform(test_reviews_data)

print('BOW_cv_train:',cv_train.shape)
print('BOW_cv_test:',cv_test.shape)
#vocab=cv.get_feature_names()-toget feature names

#Tfidf vectorizer
tf=TfidfVectorizer(min_df=1,max_df=1,use_idf=True,ngram_range=(1,3))
#transformed train reviews
tf_train=tf.fit_transform(train_reviews_data)
#transformed test reviews
tf_test=tf.transform(test_reviews_data)
print('Tfidf_train:',tf_train.shape)
print('Tfidf_test:',tf_test.shape)

#labeling the sentient data
label=LabelBinarizer()
#transformed sentiment data
sentiment_data=label.fit_transform(data['sentiment'])
print(sentiment_data.shape)

train_data=data.sentiment[:30000]
test_data=data.sentiment[30000:]
#training the model
logistic=LogisticRegression(penalty='l2',max_iter=500,C=1,random_state=42)
#Fitting the model for Bag of words
lr_bow=logistic.fit(cv_train,train_data)
print(lr_bow)
#Fitting the model for tfidf features
lr_tfidf=logistic.fit(tf_train,train_data)
print(lr_tfidf)

#Predicting the model for bag of words
lr_bow_predict=logistic.predict(cv_test)
print(lr_bow_predict)
##Predicting the model for tfidf features
lr_tfidf_predict=logistic.predict(tf_test)
print(lr_tfidf_predict)
#Accuracy score for bag of words
lr_bow_score=accuracy_score(test_data,lr_bow_predict)
print("lr_bow_score :",lr_bow_score)
#Accuracy score for tfidf features
lr_tfidf_score=accuracy_score(test_data,lr_tfidf_predict)
print("lr_tfidf_score :",lr_tfidf_score)